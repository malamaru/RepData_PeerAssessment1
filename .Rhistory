?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, 4,)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE,prob = c(0.3, 0.7))
rbinom(100, size = 1, prob = 0.7)
flips2 <-  rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl,mtcars)
hist(mtcars$mpg)
bye()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ",Housing)
installed.packages
installed.packages(lib.loc = NULL, priority = NULL,
noCache = FALSE, fields = NULL,
subarch = .Platform$r_arch)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
select()
select(cran, ip_id, package, country)
select()
select(cran)
select(dplyr)
info()
play()
select()
select(cran)
select(mydf)
nxt()
select(ip_id)
select()
select(cran)
select(cran, ip_id, package, country)
select(cran, r_arch:country)
select(cran, -time)
select(cran, -time)
select(cran, -time)
select(cran, -time)
select(cran, r_arch:country)
?select
select(cran, ip_id, package, country)
select(5:20)
cran[5:20]
5:20
select(cran, r_arch:country)
select(cran, -time)
select(cran, country:r_arch)
select(cran, ip_id, package, country)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-x:size)
select(cran)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2=select(cran,-(x:time))
cran2=select(cran,-(date:time))
cran2<-select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package,  mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_inique)
View(top_unique)
top_unique_sorted<-arrange(top_unique ,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
reset
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
studenta
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
?extract_numeric
submit()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
?mutate
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed,failed)
sat
?select
?gather
?separate
submit()
submit()
submit()
?group_by
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 20, minutes = 37, seconds = 55)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time=mdy("June 17, 2008",tz = "Singapore")
last_time<-mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
---
output:
html_document:
keep_md: yes
---
Reproducible Research: Peer Assessment 1
==========================================
created by Mala on April 15, 2015
### Basic settings
```{r}
echo = TRUE  # Always make code visible
options(scipen = 1)  # Turn off scientific notations for numbers
setwd("C:/Mala/MReproducible Research/PeerAssessment1") # Set work directory
library(knitr)
opts_chunk$set(fig.path ="figure/", tidy=TRUE) # Set folder to save plots
```
Introduction
============
This assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through out the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.
## Data
The data for this assignment can be downloaded from the course web
site:
* Dataset: [Activity monitoring data](https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip) [52K]
The variables included in this dataset are:
* **steps**: Number of steps taking in a 5-minute interval (missing
values are coded as `NA`)
* **date**: The date on which the measurement was taken in YYYY-MM-DD
format
* **interval**: Identifier for the 5-minute interval in which
measurement was taken
The dataset is stored in a comma-separated-value (CSV) file and there
are a total of 17,568 observations in this
dataset.
##### Below libraries packages are required for this assignment, packages can installed using command > install.packages("_packagename_")
* plyr
* ggplot2
* knitr
### Loading and preprocessing the data
* Load the activity data
```{r}
activityRwDt <- read.csv("./Data/activity.csv") # activity raw data
```
* View few records from the raw activity data
```{r}
kable(head(activityRwDt))
```
*  Perform summary statistics  on activity raw data (activtyRWDt) to understand  content of  variables steps, date and interval. And you would see their are missing values (NAs) in variable **steps**
```{r}
summary(activityRwDt)
```
* Process the data i.e. transform the date variable to data class
```{r}
# Make a copy activity raw data for data cleansing and analysis  purposes
activityData <- activityRwDt
activityData$date <-  as.Date(activityData$date)
```
### What is mean total number of steps taken per day?
##### 1. Make a histogram of the total number of steps taken each day
```{r}
# Remove NA's from activityData
activitynoNA <- na.omit(activityData)
activitynoNA$yearmon  <- format(activitynoNA$date, "%B %Y")
# load library ggplot2
library(ggplot2)
ggplot(data=activitynoNA, aes(x=date, y=steps, fill=yearmon, width=0.8)) + geom_bar(stat = "identity", position = position_dodge()) +
guides(fill=F) + ggtitle("Histogram of Total Number of Steps Taken Each Day") + ylab("Total number of steps") + xlab('Date') +
theme(legend.position='none') + facet_grid(. ~ yearmon, scales="free", space="free")
```
##### 2. Calculate and report the mean and median total number of steps taken per day
```{r}
# load library plyr
library(plyr)
# Calculate mean steps taken per day
meanSteps <- round(mean((ddply(activitynoNA, ~date, summarise, sum = sum(steps))$sum)))
# Calculate median steps taken per day
medSteps <- median((ddply(activitynoNA, ~date, summarise, sum = sum(steps))$sum))
```
* **Mean** steps taken per day is  **`r meanSteps`**
* **Median** steps taken per day is  **`r medSteps`**
### What is the average daily activity pattern?
##### 1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
avgSteps <- ddply(activitynoNA, ~interval, summarise, meanOfSteps = mean(steps))
ggplot(avgSteps, aes(interval, meanOfSteps)) + geom_line(color = "#0066CC", size = 0.8) +
labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals",
y = "Average Number of Steps Taken")
```
##### 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
# Find maxium of steps from avgSteps dataset
maxStep <- max(avgSteps$meanOfSteps)
print(maxStep)
# Find the line containing maxStep and find the interval for this line
maxInterval <- avgSteps[avgSteps$meanOfSteps == maxStep, ]$interval
print(maxInterval)
```
###### The maximum number of steps (on average across all the days) is **`r round(maxStep, 1)`** and it is contained in interval `r maxInterval`
### Imputing missing values
##### 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
# Total Number of missing valuses in activity dataset is:
sum(is.na(activityRwDt))
```
##### 2. Devise a strategy for filling in all of the missing values in the dataset.
* The strategy used to fill each missing(NA) values is the mean of that 5-minute interval
##### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in _(with above strategy)_ .
```{r}
# Create a new dataset
newactivity <- activityRwDt
# Find missing values i.e NAs and fill it from avgSteps$meanOfSteps column (steps) where
# newactivity$interval == avgSteps$meanOfSteps
for (i in 1:nrow( newactivity)) {
if (is.na( newactivity$steps[i])) {
newactivity$steps[i] <- avgSteps[which(newactivity$interval[i] == avgSteps$interval), ]$meanOfSteps
}
}
```
* Perform summary statistics  on newactivity data (newactivty) and compare with statistics of activity raw data and you would see that there are no **NAs** in new dataset
```{r}
summary(newactivity)
```
##### 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
newactivity$date <-  as.Date(newactivity$date)
newactivity$yearmon  <- format(newactivity$date, "%B %Y")
ggplot(data=newactivity, aes(x=date, y=steps, fill=yearmon, width=0.8)) + geom_bar(stat = "identity", position = position_dodge()) +
guides(fill=F) + ggtitle("Histogram of Total Number of Steps Taken Each Day
(no missing steps)") + ylab("Total number of steps") + xlab('Date') +
theme(legend.position='none') + facet_grid(. ~ yearmon, scales="free", space="free")
```
* What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
# Calculate mean total number of steps taken per day on new dataset
mean((ddply(newactivity, ~date, summarise, sum = sum(steps))$sum))
# Calculate median total number of steps taken per day on new dataset
median((ddply(newactivity, ~date, summarise, sum = sum(steps))$sum))
```
* After imputing the missing data, the new mean of total steps taken per day is the same as that of the old mean; however new median of total steps taken per day is increased by one than that of old median.
### Are there differences in activity patterns between weekdays and weekends?
##### 1. Create a new factor variable in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r}
# Add a new column containing day of week
newactivity$weekday = weekdays(newactivity$date)
# Add a new column containing either Weekday OR Weekend
newactivity$weekdayType <- ifelse(newactivity$weekday == "Saturday" | newactivity$weekday ==
"Sunday", "Weekend", "Weekday")
# convert column to factor
newactivity$weekdayType <- factor(newactivity$weekdayType)
```
##### 2. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was creating using simulated data:
```{r}
# Create a new dataset grouping data by interval and weekday.type
avgWeekDy <- ddply(newactivity, ~interval + weekdayType, summarise, meanSteps = mean(steps))
avgWeekDy$interval <- as.numeric(as.character(avgWeekDy$interval))
# Plot using ggplot2
ggplot(data = avgWeekDy, aes(x = interval, y = meanSteps, color = weekdayType)) +
geom_line() + facet_grid(weekdayType ~ .) + scale_x_continuous("Day Time Interval",
breaks = seq(min(avgWeekDy$interval), max(avgWeekDy$interval), 200)) +
scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval")
```
* In the above the plot, the patterns are different on weekends and weekdays. On weekdays there is a clear peak (raise of steps)  in the morning between 8:00 AM and 9:00 AM (_this could be people going to work around this time_). There peak on weekends in morning between 8:00 AM and 9:00 AM is much smaller and number of steps during the other hours between 10:00 AM and 4:00 PM of the day is higher than on the weekdays
##### _Remove all variables and data frames to free the memory._
```{r}
rm(activityRwDt, activityData,activitynoNA,
meanSteps,medSteps, avgSteps,
maxStep, maxInterval, newactivity,
avgWeekDy)
```
##### Below are the details of R environment used for this analysis
```{r}
sessionInfo()
```
